{
  "dbCell": {
    "prefix": "dbCell",
    "body": [
      "<script>",
      "  // import { } from '\\$components';",
      "  // import { mask } from '\\$lib/mongoTable';",
      "  ",
      "  // props (external)",
      "  export let collection = '';",
      "  export let column = {};",
      "  // export let columns = [];",
      "  export let editable = true;",
      "  export let i = 0;",
      "  export let j = 0;",
      "  export let keyDownHandler;",
      "  export let row = {};",
      "  // export let rows = [];",
      "  export let updateField;",
      "  export let value = '';",
      "</script>",
      "",
      "{#if editable}",
      "  $1",
      "{:else}",
      "  ",
      "{/if}",
    ]
  },
  "route": {
    "prefix": "route",
    "body": [
      "<script>",
      "  import { page } from '\\$app/stores';",
      "  import { TitleBar } from '\\$components';",
      "  import { routeStates } from '\\$stores';",
      "  ",
      "  // utilities",
      "  ",
      "  // handlers",
      "  ",
      "  // props (internal)",
      "  ",
      "  // props (external)",
      "  export let data;",
      "  export let errors;",
      "  ",
      "  if ($routeStates?.[\\$page.url.pathname] === undefined) {",
      "    $routeStates[\\$page.url.pathname] = {",
      "    };",
      "  }",
      "  ",
      "  // props (dynamic)",
      "  ",
      "</script>",
      "",
      "<div class=\"flex flex-col flex-grow overflow-hidden\">",
      "  <TitleBar>",
      "    <svelte:fragment slot=\"title\">$1</svelte:fragment>",
      "  </TitleBar>",
      "  <div class=\"flex flex-col overflow-y-auto  p-[2rem]\" />",
      "</div>"
    ]
  },
  "routeDBTable": {
    "prefix": "routeDBTable",
    "body": [
      "<script>",
      "  import { page } from '\\$app/stores';",
      "  import { DBButtonCreate, DBButtonFilter, DBButtonRemove, DBTable, TitleBar } from '\\$components';",
      "  import { collections, routeStates } from '\\$stores';",
      "  ",
      "  // utilities",
      "  ",
      "  // handlers",
      "  ",
      "  // props (internal)",
      "  let collection = \"$2\";",
      "  let columns = []",
      "  let methods = undefined;",
      "  ",
      "  if (\\$routeStates?.[\\$page.url.pathname] === undefined) {",
      "    \\$routeStates[\\$page.url.pathname] = {",
      "      filters: [],",
      "      pagination: {",
      "        length: undefined,",
      "        page: undefined",
      "      },",
      "      rows: [],",
      "      sort: undefined,",
      "    };",
      "  }",
      "  ",
      "  // props (external)",
      "  ",
      "  // props (dynamic)",
      "  $: if (\\$collections[collection] && methods !== undefined)",
      "    methods.update.rows(\\$collections[collection]);",
      "  ",
      "</script>",
      "",
      "<div class=\"flex flex-col flex-grow overflow-hidden\">",
      "  <TitleBar>",
      "    <svelte:fragment slot=\"title\">$1</svelte:fragment>",
      "    <svelte:fragment slot=\"right\">",
      "      <DBButtonRemove bind:rows={\\$routeStates[\\$page.url.pathname].rows} {collection} />",
      "      <DBButtonFilter bind:filters={\\$routeStates[\\$page.url.pathname].filters} {columns} />",
      "      <DBButtonCreate {collection} {columns} />",
      "    </svelte:fragment>",
      "  </TitleBar>",
      "  <DBTable",
      "    bind:columns",
      "    bind:methods",
      "    bind:pagination={\\$routeStates[\\$page.url.pathname].pagination}",
      "    bind:rows={\\$routeStates[\\$page.url.pathname].rows}",
      "    bind:sort={\\$routeStates[\\$page.url.pathname].sort}",
      "    {collection}",
      "    filters={\\$routeStates[\\$page.url.pathname].filters}",
      "  />",
      "</div>"
    ]
  }
}
